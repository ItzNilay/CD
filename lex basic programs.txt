EVEN OR Odd


%{
#include <iostream>
using namespace std;
%}

DIGIT       [0-9]
ODD         {DIGIT}*([13579])
EVEN        {DIGIT}*([02468])
WHITESPACE  [ \t\n]

%%

{ODD}       { cout << "Odd number: " << yytext << endl; }
{EVEN}      { cout << "Even number: " << yytext << endl; }
{WHITESPACE}    /* ignore whitespace */
.           { cout << "Invalid input: " << yytext << endl; }

%%

int main() {
    yylex();
    return 0;
}








POSITIVE OR NEGATIVE


%{
#include <iostream>
using namespace std;
%}

DIGIT       [0-9]
%%
{DIGIT}+    {
                cout << "Positive Number: " << yytext << endl;
            }
-{DIGIT}+   {
                cout << "Negative Number: " << yytext << endl;
            }
.           ; // ignore any other characters
%%

int main() {
    yylex();
    return 0;
}




PRIME NUM 


%{
#include <iostream>
#include <cmath>
using namespace std;
%}

%%

[0-9]+ {
    int num = atoi(yytext);
    if(is_prime(num)) {
        cout << num << " is a prime number" << endl;
    } else {
        cout << num << " is not a prime number" << endl;
    }
}

%%

bool is_prime(int n) {
    if (n <= 1) {
        return false;
    }
    if (n <= 3) {
        return true;
    }
    if (n % 2 == 0 || n % 3 == 0) {
        return false;
    }
    for (int i = 5; i * i <= n; i = i + 6) {
        if (n % i == 0 || n % (i + 2) == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    yylex();
    return 0;
}







WORD COUNT IN A SENTENCE 


%{
#include <stdio.h>
int wordCount = 0;
%}

%%
[a-zA-Z]+   { wordCount++; }
.           ;
\n          { printf("Number of words: %d\n", wordCount); wordCount = 0; }
%%

int yywrap() {
    return 1;
}

int main() {
    yylex();
    return 0;
}







ARMSTRONG NUM


%{
#include <stdio.h>
#include <math.h>
%}

%%

[0-9]+      {
                int num = atoi(yytext);
                int originalNum = num;
                int numDigits = 0;
                int sum = 0;

                // Count number of digits
                while (originalNum != 0) {
                    originalNum /= 10;
                    numDigits++;
                }

                originalNum = num;

                // Calculate sum of nth power of individual digits
                while (originalNum != 0) {
                    int digit = originalNum % 10;
                    sum += pow(digit, numDigits);
                    originalNum /= 10;
                }

                // If the sum equals the number itself, it's an Armstrong number
                if (sum == num) {
                    printf("%d is an Armstrong number.\n", num);
                }
                else {
                    printf("%d is not an Armstrong number.\n", num);
                }
            }

.           ;

%%

int main() {
    yylex();
    return 0;
}
